@page "/datagrid"
@rendermode InteractiveServer
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Grids

<PageTitle>Home</PageTitle>
<div class="container">
    <div class="context-container">
        <div class="title-container">
            <h1>Learning Paths</h1>
            <h2>Learning Paths</h2>
            <div class="subtitle">This scheduler is the central hub for tracking and managing the automated, adaptive
                micro-learning paths.
            </div>
        </div>
        <div class="users-list-container">
            <SfGrid DataSource="@Orders" AllowPaging="false">
                <GridPageSettings PageSize="5"></GridPageSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(Order.OrderID) HeaderText="Order ID" TextAlign="TextAlign.Right"
                        Width="120"></GridColumn>
                    <GridColumn Field=@nameof(Order.CustomerID) HeaderText="Customer Name" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(Order.OrderDate) HeaderText="Order Date" Format="d"
                        Type="ColumnType.DateOnly" TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field=@nameof(Order.OrderTime) HeaderText="Order Time" Type="ColumnType.TimeOnly"
                        TextAlign="TextAlign.Right" Width="130"></GridColumn>
                    <GridColumn Field=@nameof(Order.Freight) HeaderText="Freight" Format="C2"
                        TextAlign="TextAlign.Right" Width="120"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>


<style>
    .error {
        color: red;
    }
</style>

@code {

    public class Order
    {
        public int? OrderID { get; set; }
        public string CustomerID { get; set; }
        public DateOnly? OrderDate { get; set; }
        public TimeOnly? OrderTime { get; set; }
        public double? Freight { get; set; }
    }
    public List<Order> Orders { get; set; }

    protected override void OnInitialized()
    {
        Orders = Enumerable.Range(1, 10).Select(x => new Order()
            {
                OrderID = 1000 + x,
                CustomerID = (new string[] { "ALFKI", "ANANTR", "ANTON", "BLONP", "BOLID" })[new Random().Next(5)],
                Freight = 2.1 * x,
                OrderDate = new DateOnly(2023, 2, x),
                OrderTime = new TimeOnly(x, 00)
            }).ToList();
    }

    public string ErrorDetails = "";
    public void ActionFailure(FailureEventArgs args)
    {
        this.ErrorDetails = "Server exception: 404 Not found";
        StateHasChanged();
    }
}